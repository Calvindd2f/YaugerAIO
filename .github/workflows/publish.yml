name: Publish to PowerShell Gallery

on:
  push:
    branches:
      - main
    tags:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: false
        type: string

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -Force -SkipPublisherCheck -AllowClobber
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -AllowClobber

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          if ($results) {
            Write-Host "Script analysis results:"
            $results | Format-Table -AutoSize
            if ($results.Severity -contains 'Error') {
              throw "Script analysis found errors. Please fix them before publishing."
            }
          }

      # tests were here.

  publish:
    runs-on: windows-latest
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-

      - name: Install PowerShell Gallery Tools
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PowerShellGet -Force -SkipPublisherCheck -AllowClobber

      - name: Determine Version
        id: version
        shell: pwsh
        run: |
          $manifestPath = ".\YaugerAIO.psd1"
          $manifest = Import-PowerShellDataFile $manifestPath
          $currentVersion = 1.2

          # If this is a tag push, use the tag version
          if ($env:GITHUB_REF.StartsWith('refs/tags/v')) {
            $version = $env:GITHUB_REF.Replace('refs/tags/v', '')
          }
          # If workflow_dispatch with version input, use that
          elseif ($env:VERSION) {
            $version = $env:VERSION
          }
          # Otherwise, use current version
          else {
            $version = $currentVersion
          }

          Write-Host "Current version: $currentVersion"
          Write-Host "Publishing version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT

      - name: Update Module Version
        shell: pwsh
        run: |
          $manifestPath = ".\YaugerAIO.psd1"
          $w

          # Update the manifest version
          $content = Get-Content $manifestPath -Raw
          $content = $content -replace "ModuleVersion = '.*'", "ModuleVersion = '$version'"
          Set-Content -Path $manifestPath -Value $content -NoNewline

          Write-Host "Updated module version to 1.2.35"

      - name: Validate Module
        shell: pwsh
        run: |
          $manifestPath = ".\YaugerAIO.psd1"
          $manifest = Import-PowerShellDataFile $manifestPath

          # Basic validation
          if (-not $manifest.ModuleVersion) { throw "ModuleVersion is missing" }
          if (-not $manifest.GUID) { throw "GUID is missing" }
          if (-not $manifest.Author) { throw "Author is missing" }
          if (-not $manifest.Description) { throw "Description is missing" }

          Write-Host "Module validation passed"

      - name: Publish to PowerShell Gallery
        shell: pwsh
        env:
          PSGALLERY_API_KEY: ${{ secrets.PSG_TOKEN }}
        run: |
          $publishParams = @{
            Path = "."
            NuGetApiKey = $env:PSGALLERY_API_KEY
            Repository = "PSGallery"
            Force = $true
            Verbose = $true
          }

          try {
            Publish-Module @publishParams
            Write-Host "Successfully published version ${{ steps.version.outputs.version }} to PowerShell Gallery"
          }
          catch {
            Write-Error "Failed to publish module: $_"
            throw
          }

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release

            - Enhanced system maintenance and optimization tools
            - Improved error handling and performance monitoring
            - Threaded operations for better performance
            - Comprehensive testing and validation

            ### Version: ${{ steps.version.outputs.version }}

            For detailed information, please visit the [project page](https://github.com/Graytools/YaugerAIO).
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
