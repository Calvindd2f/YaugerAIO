name: CI

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/version-bump.yml'

jobs:
  code-quality:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -AllowClobber
          Install-Module -Name Pester -Force -SkipPublisherCheck -AllowClobber

      - name: Run PSScriptAnalyzer
        shell: pwsh
        run: |
          $results = Invoke-ScriptAnalyzer -Path . -Recurse -Settings PSGallery
          if ($results) {
            Write-Host "Script analysis results:"
            $results | Format-Table -AutoSize
            Write-Host "Total issues found: $($results.Count)"
            
            $errors = $results | Where-Object { $_.Severity -eq 'Error' }
            $warnings = $results | Where-Object { $_.Severity -eq 'Warning' }
            $info = $results | Where-Object { $_.Severity -eq 'Information' }
            
            Write-Host "Errors: $($errors.Count), Warnings: $($warnings.Count), Info: $($info.Count)"
            
            if ($errors) {
              Write-Host "Errors found:"
              $errors | Format-Table -AutoSize
              throw "Script analysis found errors. Please fix them."
            }
          } else {
            Write-Host "No issues found by PSScriptAnalyzer"
          }

      - name: Validate Module Manifest
        shell: pwsh
        run: |
          $manifestPath = ".\YaugerAIO.psd1"
          
          # Test if manifest can be imported
          try {
            $manifest = Import-PowerShellDataFile $manifestPath
            Write-Host "Module manifest imported successfully"
          }
          catch {
            throw "Failed to import module manifest: $_"
          }
          
          # Validate required fields
          $requiredFields = @('ModuleVersion', 'GUID', 'Author', 'Description', 'PowerShellVersion')
          foreach ($field in $requiredFields) {
            if (-not $manifest.$field) {
              throw "Required field '$field' is missing from module manifest"
            }
          }
          
          # Validate version format
          try {
            [Version]$manifest.ModuleVersion | Out-Null
            Write-Host "Module version format is valid: $($manifest.ModuleVersion)"
          }
          catch {
            throw "Invalid module version format: $($manifest.ModuleVersion)"
          }
          
          # Validate GUID format
          try {
            [Guid]$manifest.GUID | Out-Null
            Write-Host "GUID format is valid: $($manifest.GUID)"
          }
          catch {
            throw "Invalid GUID format: $($manifest.GUID)"
          }
          
          Write-Host "Module manifest validation passed"

      - name: Test Module Import
        shell: pwsh
        run: |
          # Test if module can be imported
          try {
            Import-Module .\YaugerAIO.psd1 -Force
            Write-Host "Module imported successfully"
            
            # List exported functions
            $exportedFunctions = Get-Command -Module YaugerAIO
            Write-Host "Exported functions: $($exportedFunctions.Count)"
            $exportedFunctions | ForEach-Object { Write-Host "  - $($_.Name)" }
            
            # Remove module
            Remove-Module YaugerAIO -Force
            Write-Host "Module removed successfully"
          }
          catch {
            throw "Failed to import module: $_"
          }

  test:
    runs-on: windows-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name Pester -Force -SkipPublisherCheck -AllowClobber

      - name: Run Tests
        shell: pwsh
        run: |
          # Import module for testing
          Import-Module .\YaugerAIO.psd1 -Force
          
          # Run tests with coverage
          $testResults = Invoke-Pester -Path .\Tests\ -Output Detailed -PassThru -CodeCoverage .\YaugerAIO.psm1
          
          Write-Host "Test Results:"
          Write-Host "  Total: $($testResults.TotalCount)"
          Write-Host "  Passed: $($testResults.PassedCount)"
          Write-Host "  Failed: $($testResults.FailedCount)"
          Write-Host "  Skipped: $($testResults.SkippedCount)"
          
          if ($testResults.CodeCoverage) {
            $coverage = $testResults.CodeCoverage
            Write-Host "Code Coverage:"
            Write-Host "  Commands Analyzed: $($coverage.NumberOfCommandsAnalyzed)"
            Write-Host "  Commands Executed: $($coverage.NumberOfCommandsExecuted)"
            Write-Host "  Coverage Percentage: $([math]::Round($coverage.NumberOfCommandsExecuted / $coverage.NumberOfCommandsAnalyzed * 100, 2))%"
          }
          
          if ($testResults.FailedCount -gt 0) {
            throw "Tests failed. Please check the test results."
          }
          
          # Remove module
          Remove-Module YaugerAIO -Force

  build-validation:
    runs-on: windows-latest
    needs: [code-quality, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PowerShell
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache PowerShell modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/powershell/Modules
            ~/.nuget/packages
          key: ${{ runner.os }}-powershell-modules-${{ hashFiles('**/*.psd1') }}
          restore-keys: |
            ${{ runner.os }}-powershell-modules-

      - name: Install dependencies
        shell: pwsh
        run: |
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          Install-Module -Name PowerShellGet -Force -SkipPublisherCheck -AllowClobber

      - name: Test Module Build
        shell: pwsh
        run: |
          # Test if module can be built/packaged
          try {
            # Test manifest validation
            Test-ModuleManifest .\YaugerAIO.psd1
            Write-Host "Module manifest validation passed"
            
            # Test if module can be published (dry run)
            $publishParams = @{
              Path = "."
              Repository = "PSGallery"
              WhatIf = $true
            }
            
            # This will fail if there are issues with the module structure
            Publish-Module @publishParams
            Write-Host "Module build validation passed"
          }
          catch {
            throw "Module build validation failed: $_"
          }

      - name: Create Artifact
        uses: actions/upload-artifact@v4
        with:
          name: YaugerAIO-Module
          path: |
            YaugerAIO.psd1
            YaugerAIO.psm1
            YaugerAIOclasses.ps1
            Public/
            Private/
          retention-days: 30 